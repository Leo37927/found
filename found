#!/usr/bin/env python

from __future__ import print_function
from subprocess import call, check_output, Popen

import argparse
import os
import sys


def open_file(filepath):
    call(['xdg-open', filepath])


def copy_to_xclip(filepath):
    os.system('echo %s | xclip' % filepath)


def locate(terms, is_directory, case_sensitive):
    options = []

    pattern = '*' + '*'.join(terms)

    if not is_directory:
        pattern += '*'
        options.append('--basename')

    if not case_sensitive:
        options.append('--ignore-case')

    cmd = ['locate'] + options + [pattern]

    try:
        return check_output(cmd)[:-1].split('\n')
    except:
        return []


def show_candidates(items):
    try:
        from termcolor import colored

        for i in range(1, len(items) + 1):
            print(colored('[%d] ' % i, 'yellow', attrs=['bold']), end='')
            print(items[i - 1])

    except:
        for i in range(1, len(items) + 1):
            print('[%d]' % i, items[i - 1])


def select_item(items, action):
    if len(items) == 1:
        action(items[0])
    else:
        show_candidates(items)
        item_no = int(raw_input("\nChoose one file to open: "))
        action(items[item_no - 1])


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Find and open files easily.')

    parser.add_argument('terms',
                        metavar='term',
                        nargs='+',
                        help='The terms to search with')

    parser.add_argument('-d', '--directory',
                        action='store_true',
                        help='Search for directories instead of files')

    parser.add_argument('-c', '--case-sensitive',
                        action='store_true',
                        help='Enable case sensitive search')

    parser.add_argument('-x', '--xclip',
                        action='store_true',
                        help='Copy full path of seleted item with `xclip\'')

    args = parser.parse_args()
    items = locate(args.terms, args.directory, args.case_sensitive)

    if len(items) == 0:
        print("File(s) not found.")
        sys.exit(1)

    try:
        if args.xclip:
            select_item(items, copy_to_xclip)
        else:
            select_item(items, open_file)
    except:
        pass
